from domain import *
from mdp_planning import\
    policy_model, value_model
import torch
import torch.tensor as tensor
import pyro
import pyro.distributions as dist
from pyro.contrib.autoname import scope
from pyro import poutine
import sys
import matplotlib.pyplot as plt
import numpy as np
from utils import Infer


def belief_policy_model(belief, t, discount=1.0, discount_factor=0.95, max_depth=10):
    state = states[pyro.sample("s%d" % t, belief)]
    return policy_model(state, t, discount=discount,
                        discount_factor=discount_factor,
                        max_depth=max_depth)

def belief_policy_model_guide(belief, t, discount=1.0, discount_factor=0.95, max_depth=10):
    # prior weights is uniform
    weights = pyro.param("action_weights", tensor([0.1, 0.1, 0.1]),
                         constraint=dist.constraints.simplex)
    state = states[pyro.sample("s%d" % t, belief)]
    # This is just to generate the other variables
    with poutine.block(hide=["a%d" % t]):
        # Need to hide 'at' generated by the policy_model;
        # we don't care about it; because that's what we are inferring.
        policy_model(state, t, discount=discount,
                     discount_factor=discount_factor,
                     max_depth=max_depth)
    # We eventually generate actions based on the weights
    action = pyro.sample("a%d" % t, dist.Categorical(weights))


def main():
    prior_belief = dist.Categorical(tensor([1., 1., 1e-9]))

    max_depth = 3
    discount_factor = 0.95    
    svi = pyro.infer.SVI(belief_policy_model,
                         belief_policy_model_guide,
                         pyro.optim.Adam({"lr": 0.01}),
                         loss=pyro.infer.Trace_ELBO())
    Infer(svi, prior_belief, 0,
          discount=1.0, discount_factor=discount_factor, max_depth=max_depth,
          num_steps=10, print_losses=True)    
    weights = pyro.param("action_weights")
    print("Action to take: %s" % actions[torch.argmax(weights).item()])
    print("Action weights: %s" % str(pyro.param("action_weights")))    

if __name__ == "__main__":
    main()
